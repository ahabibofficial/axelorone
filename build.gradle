buildscript {
	apply from: "gradle/adk.gradle"
	dependencies {
		classpath adkPlugins()
		classpath "com.diffplug.spotless:spotless-plugin-gradle:3.12.0"
	}
}

apply plugin: 'axelor-app'
apply plugin: "com.diffplug.gradle.spotless"

spotless { 
	java {  
		googleJavaFormat()
	} 
}


def modules = new File('modules/abs').listFiles().findAll { dir ->
	new File(dir, 'build.gradle').exists()
}

def otherModules = new File('modules').listFiles().findAll { dir ->
	new File(dir, 'build.gradle').exists()
}

modules.addAll(otherModules)



def enModules = new File('modules/abs').listFiles().findAll { dir ->
  new File(dir, 'build.gradle').exists() && !dir.name.endsWith('-demo-fr') && !dir.name.endsWith('-l10n-fr')
}

def frModules = new File('modules/abs').listFiles().findAll { dir ->
	new File(dir, 'build.gradle').exists() && !dir.name.endsWith('-demo-en') && !dir.name.endsWith('-l10n-en')
}

def installedModules = project.hasProperty('lang') && project.getProperty('lang') == 'fr' ? frModules : enModules

application {

	name "axelor-erp"
	title "Axelor :: ERP"

	version "4.2.6"

	// ADK version required
	adkVersion "~4.1.4"

	// depends on all modules
	modules.each { dir ->
		module "modules:$dir.name"
	}

	// install all modules
	installedModules.each { dir ->
			install "$dir.name"
	}

}

allprojects {
	apply plugin: "com.diffplug.gradle.spotless"
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	afterEvaluate { generateCode.finalizedBy( tasks.getByName('spotlessApply') ) }
}

tomcat {
	httpPort = project.properties.get("http.port", 8080) as Integer
	stopPort = 9451
}

task("dataImport", type: JavaExec) {
	main = "com.axelor.apps.erp.Main"
	classpath = sourceSets.main.runtimeClasspath
	if(System.getProperty("exec.args") != null) {
		args System.getProperty("exec.args").split()
	}
}

build.doLast{
	archiveReports.execute()
	archiveImages.execute()
}

task archiveReports(type: Zip){
	from 'modules/abs'
    include '*/src/main/resources/reports/*'
	classifier 'reports'
	eachFile { fileCopyDetails ->
		fileCopyDetails.path = fileCopyDetails.path.replaceAll(".*/src/main/resources/reports/", '')
	}
	includeEmptyDirs = false
	destinationDir = new File("$buildDir/libs")
}

task archiveImages(type: Zip){
	from 'modules/abs'
    include '*/src/main/resources/data-demo/img/**'
	include '*/src/main/resources/data-init/img/**'
	classifier 'img'
	eachFile { fileCopyDetails ->
		fileCopyDetails.path = fileCopyDetails.path.replaceAll(".*/src/main/resources/data-demo/img/", '').replaceAll(".*/src/main/resources/data-init/img/", "")
	}
	destinationDir = new File("$buildDir/libs")
	includeEmptyDirs = false
}
